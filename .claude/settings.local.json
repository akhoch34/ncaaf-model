{
  "permissions": {
    "allow": [
      "Bash(VIRTUAL_ENV=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv PATH=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv/bin:$PATH python3 -c \"\nimport sys\nsys.path.append(''src'')\nfrom cfb_predictor.accuracy import update_weekly_accuracy\nprint(''Testing updated accuracy calculation for Week 2...'')\nresult = update_weekly_accuracy(2025, 2, ''ESPN Bet'')\nprint(f''ATS: {result[\"\"ats_wins\"\"]}-{result[\"\"ats_losses\"\"]}-{result[\"\"ats_pushes\"\"]} ({result[\"\"ats_win_pct\"\"]:.1%})'')\nprint(f''O/U: {result[\"\"ou_wins\"\"]}-{result[\"\"ou_losses\"\"]}-{result[\"\"ou_pushes\"\"]} ({result[\"\"ou_win_pct\"\"]:.1%})'')\n\")",
      "Bash(VIRTUAL_ENV=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv PATH=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv/bin:$PATH python3 -c \"\nimport sys\nsys.path.append(''src'')\nimport pandas as pd\n\n# Check the Louisville vs James Madison game\nresults = pd.read_csv(''src/data/processed/backtests/week_2025_2_time_aware.csv'')\nlouisville_game = results[(results[''home_team''] == ''Louisville'') & (results[''away_team''] == ''James Madison'')]\n\nprint(''Louisville vs James Madison:'')\nprint(f''Final Score: {louisville_game.iloc[0][\"\"home_team\"\"]} {louisville_game.iloc[0][\"\"home_points\"\"]} - {louisville_game.iloc[0][\"\"away_team\"\"]} {louisville_game.iloc[0][\"\"away_points\"\"]}'')\nprint(f''Actual Margin: {louisville_game.iloc[0][\"\"actual_margin\"\"]} (home - away)'')\nprint(f''Spread Line: {louisville_game.iloc[0][\"\"spread_line\"\"]}'')\nprint(f''Edge: {louisville_game.iloc[0][\"\"edge_spread\"\"]}'')\nprint(f''Current Pick: {louisville_game.iloc[0][\"\"ats_pick_description\"\"]}'')\nprint(f''Result: {louisville_game.iloc[0][\"\"spread_result\"\"]}'')\n\n# Manual check\nactual_margin = louisville_game.iloc[0][''actual_margin'']  # home - away\nspread = louisville_game.iloc[0][''spread_line'']\nedge = louisville_game.iloc[0][''edge_spread'']\n\nprint(f''\\nManual Analysis:'')\nprint(f''Louisville (home) won by: {actual_margin} points'')\nprint(f''Spread was: {spread} (negative means home favored)'')\nprint(f''Louisville needed to win by more than {abs(spread)} to cover'')\nprint(f''Did Louisville cover?: {actual_margin > abs(spread) if spread < 0 else actual_margin > spread}'')\n\n# Edge analysis\nprint(f''\\nEdge Analysis:'')\nprint(f''Edge: {edge} (positive = pick home, negative = pick away)'')\nif edge > 0:\n    print(''Model picked: Louisville (home team)'')\n    should_win = actual_margin > spread\n    print(f''Should this be a WIN?: {should_win}'')\nelse:\n    print(''Model picked: James Madison (away team)'')  \n    should_win = actual_margin < spread\n    print(f''Should this be a WIN?: {should_win}'')\n\")",
      "Bash(VIRTUAL_ENV=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv PATH=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv/bin:$PATH python3 -c \"\nimport sys\nsys.path.append(''src'')\nimport pandas as pd\n\n# Check the Louisville vs James Madison game step by step\nresults = pd.read_csv(''src/data/processed/backtests/week_2025_2_time_aware.csv'')\ngame = results[(results[''home_team''] == ''Louisville'') & (results[''away_team''] == ''James Madison'')].iloc[0]\n\nprint(''Step-by-step ATS evaluation:'')\nprint(f''Game: {game[\"\"away_team\"\"]} @ {game[\"\"home_team\"\"]}'')\nprint(f''Final Score: {game[\"\"home_team\"\"]} {game[\"\"home_points\"\"]} - {game[\"\"away_team\"\"]} {game[\"\"away_points\"\"]}'')\nprint(f''Actual Margin (home-away): {game[\"\"actual_margin\"\"]}'')\nprint(f''Spread Line: {game[\"\"spread_line\"\"]} (negative = home favored)'')\n\n# Check what the model predicted\nedge = game[''edge_spread'']\npred_margin = edge + game[''spread_line'']  # edge = pred_margin - spread_line\nprint(f''\\nModel Predictions:'')\nprint(f''Predicted margin: {pred_margin:.1f}'')\nprint(f''Edge: {edge:.1f}'')\n\n# Determine pick\npick_home = edge > 0\nprint(f''\\nPick Logic:'')\nprint(f''Pick home team?: {pick_home}'')\nif pick_home:\n    print(f''Pick: {game[\"\"home_team\"\"]} to cover {game[\"\"spread_line\"\"]}'')\n    print(f''This means: {game[\"\"home_team\"\"]} needs to win by MORE than {abs(game[\"\"spread_line\"\"])} points'')\n    print(f''{game[\"\"home_team\"\"]} won by {game[\"\"actual_margin\"\"]} points'')\n    ats_win = game[''actual_margin''] > game[''spread_line'']\n    print(f''Cover check: {game[\"\"actual_margin\"\"]} > {game[\"\"spread_line\"\"]} = {ats_win}'')\nelse:\n    print(f''Pick: {game[\"\"away_team\"\"]} to cover +{abs(game[\"\"spread_line\"\"])}'')\n    print(f''This means: {game[\"\"away_team\"\"]} needs to lose by LESS than {abs(game[\"\"spread_line\"\"])} points'')\n    print(f''{game[\"\"away_team\"\"]} lost by {game[\"\"actual_margin\"\"]} points'')\n    ats_win = game[''actual_margin''] < game[''spread_line'']  \n    print(f''Cover check: {game[\"\"actual_margin\"\"]} < {game[\"\"spread_line\"\"]} = {ats_win}'')\n\nprint(f''\\nExpected result: {\"\"WIN\"\" if ats_win else \"\"LOSS\"\"}'')\nprint(f''Actual result: {game[\"\"spread_result\"\"]}'')\nprint(f''Match?: {(\"\"WIN\"\" if ats_win else \"\"LOSS\"\") == game[\"\"spread_result\"\"]}'')\n\")",
      "Bash(VIRTUAL_ENV=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv PATH=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv/bin:$PATH python3 -c \"\nimport sys\nsys.path.append(''src'')\nfrom cfb_predictor.accuracy import update_weekly_accuracy\nprint(''Testing corrected accuracy calculation for Week 2...'')\nresult = update_weekly_accuracy(2025, 2, ''ESPN Bet'')\nprint(f''ATS: {result[\"\"ats_wins\"\"]}-{result[\"\"ats_losses\"\"]}-{result[\"\"ats_pushes\"\"]} ({result[\"\"ats_win_pct\"\"]:.1%})'')\nprint(f''O/U: {result[\"\"ou_wins\"\"]}-{result[\"\"ou_losses\"\"]}-{result[\"\"ou_pushes\"\"]} ({result[\"\"ou_win_pct\"\"]:.1%})'')\n\")",
      "Bash(VIRTUAL_ENV=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv PATH=/mnt/c/Users/akhoc/Documents/ncaaf-model/.venv/bin:$PATH python3 weekly_update.py --week 3 --skip-fetch --skip-train --skip-predict --book \"ESPN Bet\" --skip-accuracy)"
    ],
    "deny": [],
    "ask": []
  }
}